alter table if exists "public"."usr_role" drop constraint if exists "role_usr_FK";
alter table if exists "public"."schedule" drop constraint if exists "schedule_usr_FK";
alter table if exists "public"."schedule" drop constraint if exists "schedule_room_FK";
alter table if exists "public"."hotel" drop constraint if exists "hotel_addressId_FK";
alter table if exists "public"."room" drop constraint if exists "room_hotelId_FK";
drop table if exists "public"."usr" CASCADE;
drop table if exists "public"."room" CASCADE;
drop table if exists "public"."address" CASCADE;
drop table if exists "public"."hotel" CASCADE;
drop table if exists "public"."usr_role" CASCADE;
drop table if exists "public"."schedule" CASCADE;

-- Table: public.address

-- DROP TABLE public.address;

CREATE TABLE public.address
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    city character varying(100) COLLATE pg_catalog."default" NOT NULL,
    country character varying(100) COLLATE pg_catalog."default" NOT NULL,
    "number" character varying(100) COLLATE pg_catalog."default" NOT NULL,
    street character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "address_PK" PRIMARY KEY (id)
)

    TABLESPACE pg_default;

ALTER TABLE public.address
    OWNER to postgres;

-- Table: public.hotel

-- DROP TABLE public.hotel;

CREATE TABLE public.hotel
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    stars integer NOT NULL,
    address_id bigint NOT NULL,
    CONSTRAINT "hotel_PK" PRIMARY KEY (id),
    CONSTRAINT hotel_name_key UNIQUE (name),
    CONSTRAINT "hotel_addressId_FK" FOREIGN KEY (address_id)
        REFERENCES public.address (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

    TABLESPACE pg_default;

ALTER TABLE public.hotel
    OWNER to postgres;

-- Table: public.room

-- DROP TABLE public.room;

CREATE TABLE public.room
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    "number" integer NOT NULL,
    price integer NOT NULL,
    is_available boolean NOT NULL,
    hotel_id bigint NOT NULL,
    CONSTRAINT "room_PK" PRIMARY KEY (id),
    CONSTRAINT "room_hotelId_FK" FOREIGN KEY (hotel_id)
        REFERENCES public.hotel (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

    TABLESPACE pg_default;

ALTER TABLE public.room
    OWNER to postgres;

-- Table: public.usr

-- DROP TABLE public.usr;

CREATE TABLE public.usr
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    password character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "usr_PK" PRIMARY KEY (id),
    CONSTRAINT usr_email_key UNIQUE (email)
)

    TABLESPACE pg_default;

ALTER TABLE public.usr
    OWNER to postgres;

-- Table: public.usr_role

-- DROP TABLE public.usr_role;

CREATE TABLE public.usr_role
(
    usr_id bigint NOT NULL,
    roles character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "role_usr_FK" FOREIGN KEY (usr_id)
        REFERENCES public.usr (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

    TABLESPACE pg_default;

ALTER TABLE public.usr_role
    OWNER to postgres;

-- Table: public.schedule

-- DROP TABLE public.schedule;

CREATE TABLE public.schedule
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    room_id bigint NOT NULL,
    usr_id bigint NOT NULL,
    rent_start date NOT NULL,
    rent_end date NOT NULL,
    CONSTRAINT "schedule_PK" PRIMARY KEY (id),
    CONSTRAINT "schedule_room_FK" FOREIGN KEY (room_id)
        REFERENCES public.room (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "schedule_usr_FK" FOREIGN KEY (usr_id)
        REFERENCES public.usr (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

    TABLESPACE pg_default;

ALTER TABLE public.schedule
    OWNER to postgres;

-- select id, country, city, street, number from address order by id;
-- select id, name, stars, address_id from hotel order by id;
-- select id, number, price, is_available, hotel_id from room order by id;
-- select id, email, password from usr order by id;
-- select id, roles from usr_role order by id;
-- select id, room_id, usr_id, rent_start, rent_end from schedule order by id;
--
-- select u.id, u.email, ur.roles
-- from usr as u
--          inner join usr_role as ur on u.id = ur.id;

INSERT INTO public.address (country, city, street, "number") VALUES ('Germany', 'Berlin', 'Street A', '3');
INSERT INTO public.address (country, city, street, "number") VALUES ('Germany', 'Berlin', 'Street B', '7');
INSERT INTO public.address (country, city, street, "number") VALUES ('Germany', 'Berlin', 'Street C', '23');

INSERT INTO public.hotel (name, stars, address_id) VALUES ('Hotel X', 5, 1);
INSERT INTO public.hotel (name, stars, address_id) VALUES ('Hotel Z', 3, 2);
INSERT INTO public.hotel (name, stars, address_id) VALUES ('Hotel Y', 4, 3);

INSERT INTO public.room ("number", price, is_available, hotel_id) VALUES (101, 50, true, 1);
INSERT INTO public.room ("number", price, is_available, hotel_id) VALUES (102, 70, true, 1);
INSERT INTO public.room ("number", price, is_available, hotel_id) VALUES (201, 90, true, 1);

INSERT INTO public.room ("number", price, is_available, hotel_id) VALUES (101, 100, true, 2);
INSERT INTO public.room ("number", price, is_available, hotel_id) VALUES (102, 170, true, 2);
INSERT INTO public.room ("number", price, is_available, hotel_id) VALUES (201, 220, true, 2);

INSERT INTO public.room ("number", price, is_available, hotel_id) VALUES (101, 75, true, 3);
INSERT INTO public.room ("number", price, is_available, hotel_id) VALUES (102, 110, true, 3);
INSERT INTO public.room ("number", price, is_available, hotel_id) VALUES (201, 135, true, 3);

INSERT INTO public.usr (email, password) VALUES ('user@gmail.com', '$2a$10$9//0cxKPOONZoq0uajXH.eHAVAl.NyM.BZYXivt.DgNoTLHnCVMIi');
INSERT INTO public.usr_role (usr_id, roles) VALUES (1, 'USER');
INSERT INTO public.usr_role (usr_id, roles) VALUES (1, 'ADMIN');

insert into schedule(room_id, usr_id, rent_start, rent_end) VALUES (1, 1, '2020-04-01', '2020-04-03');
insert into schedule(room_id, usr_id, rent_start, rent_end) VALUES (1, 1, '2020-04-07', '2020-04-10');
insert into schedule(room_id, usr_id, rent_start, rent_end) VALUES (1, 1, '2020-04-15', '2020-04-20');
insert into schedule(room_id, usr_id, rent_start, rent_end) VALUES (2, 1, '2020-04-01', '2020-04-05');
insert into schedule(room_id, usr_id, rent_start, rent_end) VALUES (2, 1, '2020-04-06', '2020-04-11');
insert into schedule(room_id, usr_id, rent_start, rent_end) VALUES (2, 1, '2020-04-16', '2020-04-20');
insert into schedule(room_id, usr_id, rent_start, rent_end) VALUES (3, 1, '2020-04-01', '2020-04-03');
insert into schedule(room_id, usr_id, rent_start, rent_end) VALUES (3, 1, '2020-04-08', '2020-04-10');
insert into schedule(room_id, usr_id, rent_start, rent_end) VALUES (3, 1, '2020-04-13', '2020-04-16');
insert into schedule(room_id, usr_id, rent_start, rent_end) VALUES (4, 1, '2020-04-01', '2020-04-03');
insert into schedule(room_id, usr_id, rent_start, rent_end) VALUES (4, 1, '2020-04-08', '2020-04-15');
insert into schedule(room_id, usr_id, rent_start, rent_end) VALUES (4, 1, '2020-04-23', '2020-04-25');
insert into schedule(room_id, usr_id, rent_start, rent_end) VALUES (5, 1, '2020-04-01', '2020-04-05');
insert into schedule(room_id, usr_id, rent_start, rent_end) VALUES (5, 1, '2020-04-10', '2020-04-11');
insert into schedule(room_id, usr_id, rent_start, rent_end) VALUES (5, 1, '2020-04-14', '2020-04-22');
insert into schedule(room_id, usr_id, rent_start, rent_end) VALUES (6, 1, '2020-04-01', '2020-04-05');
insert into schedule(room_id, usr_id, rent_start, rent_end) VALUES (6, 1, '2020-04-10', '2020-04-11');
insert into schedule(room_id, usr_id, rent_start, rent_end) VALUES (6, 1, '2020-04-14', '2020-04-22');
